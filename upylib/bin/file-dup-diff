#!/usr/bin/env python3
import random
import sys
import os
import json
from upylib.util import fs
import shutil


def load_param():
    if len(sys.argv) != 4:
        print(f"usage: {sys.argv[0]} inspect-root ref-root report-fn")
        return False
    else:
        return sys.argv[1].rstrip("/"), sys.argv[2].rstrip("/"), sys.argv[3]


def load_root(root):
    tmp_list = fs.get_dir_list(root, recursive=True)
    if tmp_list:
        dir_list = ["/"]
        for di in tmp_list:
            dir_list.append(di.full_dn[len(root):])
    else:
        dir_list = ["/"]
    # print(dir_list)

    file_dict = dict()
    for dn in dir_list:

        if dn == "/":
            real_dn = root
        else:
            real_dn = root + dn

        file_list = list()
        tmp_list = fs.get_file_list(real_dn, recursive=True)

        total_size = 0
        for fn in tmp_list:
            if fn.fn.startswith("._") or fn.fn == ".DS_Store":
                continue
            file_list.append((fn.fn, fn.size))
            total_size += fn.size

        file_dict[dn] = dict()
        file_dict[dn]["files"] = file_list
        file_dict[dn]["size"] = total_size
        file_dict[dn]["just_dn"] = dn.strip("/")[:-1]

    # for dn, finfo in file_dict.items():
    #     print(dn, finfo)
    return file_dict


def dup(inspect_root, ref_root, summary_fn):
    inspect = load_root(inspect_root)
    ref = load_root(ref_root)

    fo = open(summary_fn, "w")
    fo_match = open(summary_fn.replace(".txt", ".match.txt"), "w")
    fo_unmatch = open(summary_fn.replace(".txt", ".unmatch.txt"), "w")
    for dn, file_dict in inspect.items():
        for ref_dn, ref_file_dict in ref.items():
            if file_dict["size"] == ref_file_dict["size"]:
                print("match")
                print("match", file=fo_match)
                print((inspect_root + dn).rstrip("/"), len(file_dict["files"]), file_dict["size"], file=fo_match)
                print((ref_root + ref_dn).rstrip("/"), len(ref_file_dict["files"]), ref_file_dict["size"], file=fo_match)
                print(file=fo_match)
                break
        else:
            print("unmatch: ", end="", file=fo_unmatch)
            print(inspect_root + dn, file=fo_unmatch)
    fo.close()
    fo_match.close()
    fo_unmatch.close()
    return


def run():
    res = load_param()
    if not res:
        return False
    inspect_root, ref_root, summary_fn = res
    print("inspect:", inspect_root)
    print("ref:", ref_root)
    dup(inspect_root, ref_root, summary_fn)


if __name__ == "__main__":
    run()